user.find-all=SELECT person.id, password, name, surname, phone, email, birthday, role, is_enabled, failed_auth, last_failed_auth, \
auth_link_date, auth_link \
FROM person INNER JOIN credentials ON credentials.id = person.credentials_id INNER JOIN role ON role.id = credentials.role_id
user.find-by-email=SELECT person.id, password, name, surname, phone, email, birthday, role, is_enabled, failed_auth, last_failed_auth, \
auth_link_date, auth_link \
FROM person INNER JOIN credentials ON credentials.id = person.credentials_id INNER JOIN role ON role.id = credentials.role_id \
WHERE email=?
user.find-by-id=SELECT person.id, password, name, surname, phone, email, birthday, role, is_enabled, failed_auth, last_failed_auth, \
auth_link_date, auth_link \
FROM person INNER JOIN credentials ON credentials.id = person.credentials_id INNER JOIN role ON role.id = credentials.role_id \
WHERE person.id=?
user.find-by-auth-link=SELECT person.id, password, name, surname, phone, email, birthday, role, is_enabled, failed_auth, last_failed_auth,\
auth_link_date, auth_link \
FROM person INNER JOIN credentials ON credentials.id = person.credentials_id INNER JOIN role ON role.id = credentials.role_id \
WHERE auth_link=?

user.find-info-for-order=SELECT person.id, name, surname, phone \
FROM person INNER JOIN credentials ON credentials.id=person.credentials_id \
WHERE email=?

user.update-by-email=UPDATE person p \
  SET \
    name=:name, \
    surname=:surname, \
    phone=:phone, \
    birthday=:birthday \
  FROM credentials cr \
  WHERE cr.id=p.credentials_id AND cr.email=:email


courier.insert=INSERT INTO courier(person_id, is_active)\
    VALUES (:person_id, :is_active)
courier.find-by-id=SELECT c.id, p.name, p.birthday, p.surname, p.phone, c.is_active, \
    cr.email, cr.is_enabled, cr.failed_auth, \
    cr.last_failed_auth, cr.password, \
    r.role as role, cr.auth_link, cr.auth_link_date \
    FROM person p \
        INNER JOIN courier c ON c.person_id=p.id \
        INNER JOIN credentials cr ON p.credentials_id=cr.id \
        INNER JOIN role r ON cr.role_id=r.id \
    WHERE p.id=?

courier.update=UPDATE courier c \
  SET \
    is_active=:is_active \
  WHERE person_id=:id

courier.update-person=UPDATE person p \
  SET \
    name=:name, \
    surname=:surname, \
    phone=:phone, \
    birthday=:birthday \
  WHERE p.id=:id

courier.update-credentials=UPDATE credentials cr \
  SET \
    is_enabled=:is_enabled \
  FROM person p \
  WHERE p.id=:id AND cr.id=p.credentials_id

courier.find-by-name-surname=SELECT p. id, p.name, p.surname, p.phone, p.birthday, \
    cr.email, cr.is_enabled, c.is_active, r.role, cr.password, \
    cr.failed_auth, cr.last_failed_auth, cr.auth_link_date, cr.auth_link \
    FROM person p \
        INNER JOIN credentials cr on cr.id = p.credentials_id \
        INNER JOIN courier c on p.id = c.person_id \
        INNER JOIN role r on cr.role_id = r.id \
    WHERE (p.name LIKE CONCAT(:search, '%') or p.surname LIKE CONCAT(:search, '%')) \
    AND cr.is_enabled=:is_enabled AND c.is_active=:is_active \
    LIMIT 10 OFFSET :page

courier.number-of-rows=SELECT count(*) \
    FROM person p \
        INNER JOIN credentials cr on cr.id = p.credentials_id \
        INNER JOIN courier c on p.id = c.person_id \
        INNER JOIN role r on cr.role_id = r.id \
    WHERE (p.name LIKE CONCAT(:search, '%') or p.surname LIKE CONCAT(:search, '%')) \
    AND cr.is_enabled=:is_enabled AND c.is_active=:is_active

courier.find-by-name-surname-all=SELECT p. id, p.name, p.surname, p.phone, p.birthday, \
    cr.email, cr.is_enabled, c.is_active, r.role, cr.password, \
    cr.failed_auth, cr.last_failed_auth, cr.auth_link_date, cr.auth_link \
    FROM person p \
        INNER JOIN credentials cr on cr.id = p.credentials_id \
        INNER JOIN courier c on p.id = c.person_id \
        INNER JOIN role r on cr.role_id = r.id \
    WHERE (p.name LIKE CONCAT(:search, '%') or p.surname LIKE CONCAT(:search, '%')) \
    LIMIT 10 OFFSET :page

courier.number-of-rows-all=SELECT count(*) \
    FROM person p \
        INNER JOIN credentials cr on cr.id = p.credentials_id \
        INNER JOIN courier c on p.id = c.person_id \
        INNER JOIN role r on cr.role_id = r.id \
    WHERE (p.name LIKE CONCAT(:search, '%') or p.surname LIKE CONCAT(:search, '%'))

manager.find-by-id=SELECT p.id, p.birthday, p.name, p.surname, p.phone, \
    cr.email, cr.is_enabled, cr.failed_auth, \
    cr.last_failed_auth, cr.password, \
    r.role, cr.auth_link, cr.auth_link_date \
    FROM person p \
        INNER JOIN credentials cr ON p.credentials_id=cr.id \
        INNER JOIN role r ON cr.role_id=r.id \
    WHERE r.role='ROLE_PRODUCT_MANAGER' and p.id=?

manager.update-person=UPDATE person p \
    SET \
        name=:name, \
        surname=:surname, \
        phone=:phone, \
        birthday=:birthday \
    FROM credentials cr \
        WHERE p.credentials_id=cr.id AND p.id=:id

manager.update-credentials=UPDATE credentials cr \
    SET \
        is_enabled=:userStatus, \
        email=:email \
    FROM person p \
        WHERE p.credentials_id=cr.id AND p.id=:id;

manager.find-by-name-surname=SELECT p.id, p.birthday, p.name, p.surname, p.phone, \
    cr.email, cr.is_enabled, cr.failed_auth, \
    cr.last_failed_auth, cr.password, \
    r.role, cr.auth_link, cr.auth_link_date \
    FROM person p \
        INNER JOIN credentials cr ON p.credentials_id = cr.id \
        INNER JOIN role r on cr.role_id = r.id \
    WHERE r.role = 'ROLE_PRODUCT_MANAGER' AND (p.name LIKE CONCAT(:search, '%') OR p.surname LIKE CONCAT(:search, '%')) \
        AND cr.is_enabled=:status \
    LIMIT 10 OFFSET :page;

manager.find-by-name-surname-all=SELECT p.id, p.birthday, p.name, p.surname, p.phone, \
    cr.email, cr.is_enabled, cr.failed_auth, \
    cr.last_failed_auth, cr.password, \
    r.role, cr.auth_link, cr.auth_link_date \
    FROM person p \
        INNER JOIN credentials cr ON p.credentials_id = cr.id \
        INNER JOIN role r on cr.role_id = r.id \
    WHERE r.role = 'ROLE_PRODUCT_MANAGER' AND (p.name LIKE CONCAT(:search, '%') OR p.surname LIKE CONCAT(:search, '%')) \
    LIMIT 10 OFFSET :page;

manager.number-of-rows=SELECT count(*) \
    FROM person p \
        INNER JOIN credentials cr ON p.credentials_id = cr.id \
        INNER JOIN role r on cr.role_id = r.id \
    WHERE r.role = 'ROLE_PRODUCT_MANAGER' \
    AND (p.name LIKE CONCAT(:search, '%') OR p.surname LIKE CONCAT(:search, '%')) AND cr.is_enabled=:status

manager.number-of-rows-all=SELECT count(*) \
    FROM person p \
        INNER JOIN credentials cr ON p.credentials_id = cr.id \
        INNER JOIN role r on cr.role_id = r.id \
    WHERE r.role = 'ROLE_PRODUCT_MANAGER' \
    AND (p.name LIKE CONCAT(:search, '%') OR p.surname LIKE CONCAT(:search, '%'))


couriers-managers.all=SELECT p.id, p.name, p.surname, p.phone, p.birthday, c.is_active, c2.email, c2.is_enabled, r.role \
    FROM person p \
        LEFT JOIN courier c on p.id = c.person_id \
        INNER JOIN credentials c2 on p.credentials_id = c2.id \
        INNER JOIN role r on c2.role_id = r.id \
    WHERE r.role='ROLE_PRODUCT_MANAGER' or r.role='ROLE_COURIER'; 

user.insert=INSERT INTO person(credentials_id, name, surname, phone, birthday)\
VALUES (:credentials_id, :name, :surname, :phone, :birthday) RETURNING id
user.insert-without-credentials=INSERT INTO person(name, surname, phone)\
VALUES (:name, :surname, :phone) RETURNING id
user.insert-credentials=INSERT INTO credentials (role_id, email, password, is_enabled, auth_link, auth_link_date) \
VALUES (:role_id, :email, :password, :is_enabled, :auth_link, NOW()) RETURNING id
user.enable=UPDATE credentials SET is_enabled=true WHERE auth_link=?

user.update-password=UPDATE credentials SET password=? WHERE email=?
user.update-auth-link=UPDATE credentials SET auth_link=?, auth_link_date=NOW() WHERE email=?
user.delete-auth-link=UPDATE credentials SET auth_link=null WHERE auth_link=?
user.update-last-failed-auth=UPDATE credentials SET failed_auth = ?, last_failed_auth=NOW() WHERE email=?

user.delete-by-id=DELETE FROM person WHERE id=?
user.delete-credentials-by-email=DELETE FROM credentials WHERE id=?

role.find=SELECT id FROM role WHERE role=?

shopping-cat-item.select-by-ids-query=SELECT sc.user_id, \
                                             sc.goods_id, \
                                             sc.quantity, \
                                             sc.adding_time, \
                                             product.name AS product_name, \
                                             unit, \
                                             firm.name AS firm_name, \
                                             category.name AS category_name, \
                                             g.quantity AS goods_quantity, \
                                             g.price, \
                                             g.discount, \
                                             g.in_stock, \
                                             g.image, \
                                             g.description \
                                      FROM shopping_cart_item sc \
                                             INNER JOIN goods g  ON sc.goods_id = g.id \
                                             INNER JOIN product ON g.prod_id = product.id \
                                             INNER JOIN firm ON g.firm_id = firm.id \
                                             INNER JOIN category ON category.id = product.category_id \
                                      WHERE (user_id, goods_id) = (:userId, :goodsId)

shopping-cat-item.select-by-user-id-query=SELECT sc.user_id, \
                                                 sc.goods_id, \
                                                 sc.quantity, \
                                                 sc.adding_time, \
                                                 product.name  AS product_name, \
                                                 unit, \
                                                 firm.name     AS firm_name, \
                                                 category.name AS category_name, \
                                                 g.quantity AS goods_quantity, \
                                                 g.price, \
                                                 g.discount, \
                                                 g.in_stock, \
                                                 g.image, \
                                                 g.description \
                                          FROM shopping_cart_item sc \
                                                 INNER JOIN goods g  ON sc.goods_id = g.id \
                                                 INNER JOIN product ON g.prod_id = product.id \
                                                 INNER JOIN firm ON g.firm_id = firm.id \
                                                 INNER JOIN category ON category.id = product.category_id \
                                          WHERE user_id = :userId \
                                          ORDER BY adding_time;

shopping-cat-item.insert-query=INSERT INTO shopping_cart_item(user_id, goods_id, quantity, adding_time)\
                               VALUES (:userId, :goodsId, :quantity, :addingTime)

shopping-cat-item.update-by-ids-query=UPDATE shopping_cart_item \
                                      SET quantity=:quantity, \
                                          adding_time=:addingTime \
                                      WHERE (user_id, goods_id) = (:userId, :goodsId)

shopping-cat-item.delete-by-ids-query=DELETE FROM shopping_cart_item WHERE (user_id, goods_id) = (:userId, :goodsId)

shopping-cat-item.delete-by-user-id-query=DELETE FROM shopping_cart_item WHERE user_id=:userId

#ORDERS
order.insert=INSERT INTO order_details(person_id, courier_id, delivery_time, address, status, comment, disturb, total_sum, discount_sum) \
VALUES(:person_id, :courier_id, :delivery_time, :address, CAST (:status AS delivery_status), :comment, :disturb, :total_sum, :discount_sum) RETURNING id

order.total-pages=SELECT COUNT(id) FROM order_details WHERE courier_id=?

order.insert-item=INSERT INTO order_goods(goods_id, order_id, quantity, sum) \
VALUES(:goods_id, :order_id, :quantity, :sum)

order.select-courier-orders=SELECT order_details.id, person_id, delivery_time, address, status, comment, disturb, \
total_sum, discount_sum, name, surname, phone \
FROM order_details INNER JOIN person ON order_details.person_id = person.id \
WHERE courier_id = ? AND status <> 'DELIVERED' \
LIMIT 10 OFFSET ?

order.select-order=SELECT order_details.id, person_id, delivery_time, address, status, comment, disturb, \
total_sum, discount_sum, name, surname, phone \
FROM order_details INNER JOIN person ON order_details.person_id = person.id \
WHERE order_details.id = ?

order.select-order-goods=SELECT goods.id, product.name AS prod_name, category.name AS cat_name, firm.name AS firm_name, \
goods.unit, order_goods.quantity, order_goods.sum \
FROM product INNER JOIN category ON product.category_id = category.id \
			 INNER JOIN goods ON product.id = goods.prod_id \
			 INNER JOIN firm ON goods.firm_id = firm.id \
			 INNER JOIN order_goods ON goods.id = order_goods.goods_id \
WHERE order_goods.order_id = ? 

order.update-status=UPDATE order_details SET status = CAST (? AS delivery_status) WHERE id = ?

order.find-free-courier-id=SELECT person.id \
FROM person INNER JOIN credentials ON credentials_id = credentials.id \
			INNER JOIN role ON credentials.role_id = role.id \
			INNER JOIN courier ON person.id = courier.person_id \
WHERE role.role = 'ROLE_COURIER' AND courier.is_active = true \
	AND person.id NOT IN (SELECT courier_id \
						 FROM order_details \
						 WHERE delivery_time = CAST (? AS timestamp without time zone)) \
LIMIT 1  

order.find-couriers-num=SELECT COUNT(person_id) FROM courier WHERE is_active=true

order.find-user-orders=SELECT order_details.id, person_id, delivery_time, address, status, comment, disturb, \
total_sum, discount_sum, name, surname, phone \
FROM order_details INNER JOIN person ON person.id = person_id \
INNER JOIN credentials ON person.credentials_id = credentials.id \
WHERE email = ? AND status <> 'DELIVERED'

order.find-user-history=SELECT order_details.id, person_id, delivery_time, address, status, comment, disturb, \
total_sum, discount_sum, name, surname, phone \
FROM order_details INNER JOIN person ON person.id = person_id \
INNER JOIN credentials ON person.credentials_id = credentials.id \
WHERE email = ? AND status = 'DELIVERED'

order.find-busy-slots=SELECT DISTINCT delivery_time \
FROM order_details \
WHERE delivery_time > now()::timestamp AND delivery_time NOT IN \
	(SELECT DISTINCT cartesian.delivery_time \
	FROM ( \
			SELECT person.id, distinct_dates.delivery_time \
			FROM person INNER JOIN credentials ON credentials_id = credentials.id \
						INNER JOIN role ON credentials.role_id = role.id \
						INNER JOIN courier ON person.id = courier.person_id, \
						(	\
							SELECT DISTINCT delivery_time \
							FROM order_details \
							WHERE delivery_time > now() \
						) AS distinct_dates \
						WHERE role.role = 'ROLE_COURIER' AND is_active=true) AS cartesian \
						LEFT JOIN order_details ON (order_details.courier_id = cartesian.id \
							   AND order_details.delivery_time = cartesian.delivery_time) \
						WHERE order_details.delivery_time IS NULL) \

order.courier-info=SELECT person.id, person.name, person.surname, person.phone \
FROM person INNER JOIN order_details ON order_details.courier_id = person.id \
WHERE order_details.id = ?
