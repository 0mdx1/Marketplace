{"version":3,"file":"ngx-mat-select-search.js","sources":["ng://ngx-mat-select-search/mat-select-search-clear.directive.ts","ng://ngx-mat-select-search/mat-select-search.component.ts","ng://ngx-mat-select-search/ngx-mat-select-search.module.ts","ng://ngx-mat-select-search/ngx-mat-select-search.ts"],"sourcesContent":["import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { MatSelect } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, DOWN_ARROW, END, ENTER, ESCAPE, HOME, NINE, SPACE, UP_ARROW, Z, ZERO, } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport { delay, filter, map, startWith, switchMap, take, takeUntil, tap } from 'rxjs/operators';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: ['./mat-select-search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Type of the search input field */\n  @Input() type = 'text';\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n   *  Text that is appended to the currently active item label announced by screen readers,\n   *  informing the user of the current index, value and total options.\n   *  eg: Bank R (Germany) 1 of 6\n  */\n  @Input() indexAndLengthScreenReaderText = ' of ';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Whether to show the search-in-progress indicator */\n  @Input() searching = false;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /** Enable clear input on escape pressed */\n  @Input() enableClearOnEscapePressed = false;\n\n  /**\n   * Prevents home / end key being propagated to mat-select,\n   * allowing to move the cursor within the search input instead of navigating the options\n   */\n  @Input() preventHomeEndKeyPropagation = false;\n\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\n  @Input() disableScrollToActiveOnOptionsChanged = false;\n\n  /** Adds 508 screen reader support for search box */\n  @Input() ariaLabel = 'dropdown search';\n\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n  @Input() showToggleAllCheckbox = false;\n\n  /** select all checkbox checked state */\n  @Input() toggleAllCheckboxChecked = false;\n\n  /** select all checkbox indeterminate state */\n  @Input() toggleAllCheckboxIndeterminate = false;\n\n  /** Display a message in a tooltip on the toggle-all checkbox */\n  @Input() toggleAllCheckboxTooltipMessage = '';\n\n  /** Define the position of the tooltip on the toggle-all checkbox. */\n  @Input() toogleAllCheckboxTooltipPosition: 'left' | 'right' | 'above' | 'below' | 'before' | 'after' = 'below';\n\n  /** Show/Hide the search clear button of the search input */\n  @Input() hideClearSearchButton = false;\n\n  /**\n   * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n   * Defaults to false, so selected options are only restored while filtering is active.\n   */\n  @Input() alwaysRestoreSelectedOptionsMulti = false;\n\n  /** Output emitter to send to parent component with the toggle all boolean */\n  @Output() toggleAll = new EventEmitter<boolean>();\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', { read: ElementRef, static: true }) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', { read: ElementRef, static: true }) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective, { static: false }) clearIcon: MatSelectSearchClearDirective;\n\n  @HostBinding('class.mat-select-search-inside-mat-option')\n  get isInsideMatOption(): boolean {\n    return !!this.matOption;\n  }\n\n  /** Current search value */\n  get value(): string {\n    return this._formControl.value;\n  }\n  private _lastExternalInputValue: string;\n\n  onTouched: Function = (_: any) => { };\n\n  /** Reference to the MatSelect options */\n  public set _options(_options: QueryList<MatOption>) {\n    this._options$.next(_options);\n  }\n  public get _options(): QueryList<MatOption> {\n    return this._options$.getValue();\n  }\n  public _options$: BehaviorSubject<QueryList<MatOption>> = new BehaviorSubject<QueryList<MatOption>>(null);\n\n  private optionsList$: Observable<MatOption[]> = this._options$.pipe(\n    switchMap(_options => _options ?\n      _options.changes.pipe(\n        map(options => options.toArray()),\n        startWith<MatOption[]>(_options.toArray()),\n      ) : of(null)\n    )\n  );\n\n  private optionsLength$: Observable<number> = this.optionsList$.pipe(\n    map(options => options ? options.length : 0)\n  );\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  public _formControl: FormControl = new FormControl('');\n\n  /** whether to show the no entries found message */\n  public _showNoEntriesFound$: Observable<boolean> = combineLatest([\n    this._formControl.valueChanges,\n    this.optionsLength$\n  ]).pipe(\n    map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n      && optionsLength === this.getOptionsLengthOffset())\n  );\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n    public changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() @Inject(MatOption) public matOption: MatOption = null,\n    private liveAnnouncer: LiveAnnouncer,\n    @Optional() @Inject(MatFormField) public matFormField: MatFormField = null\n  ) {\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        (<string[]>this.matSelect.panelClass).push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          this.updateInputWidth();\n          // focus the search field when opening\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect._keyManager) {\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n        } else {\n          console.log('_keyManager was not initialized.');\n        }\n\n        this._options = this.matSelect.options;\n\n        // Closure variable for tracking the most recent first option.\n        // In order to avoid avoid causing the list to\n        // scroll to the top when options are added to the bottom of\n        // the list (eg: infinite scroll), we compare only\n        // the changes to the first options to determine if we\n        // should set the first item as active.\n        // This prevents unnecessary scrolling to the top of the list\n        // when options are appended, but allows the first item\n        // in the list to be set as active by default when there\n        // is no active selection\n        let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n\n        this._options.changes\n          .pipe(\n            takeUntil(this._onDestroy)\n          )\n          .subscribe(() => {\n            // avoid \"expression has been changed\" error\n            setTimeout(() => {\n              // Convert the QueryList to an array\n              const options = this._options.toArray();\n\n              // The true first item is offset by 1\n              const currentFirstOption = options[this.getOptionsLengthOffset()];\n\n              const keyManager = this.matSelect._keyManager;\n              if (keyManager && this.matSelect.panelOpen) {\n\n                // set first item active and input width\n\n                // Check to see if the first option in these changes is different from the previous.\n                const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n\n                // CASE: The first option is different now.\n                // Indiciates we should set it as active and scroll to the top.\n                if (firstOptionIsChanged\n                  || !keyManager.activeItem\n                  || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                  keyManager.setFirstItemActive();\n                }\n\n                // wait for panel width changes\n                setTimeout(() => {\n                  this.updateInputWidth();\n                });\n\n                if (!this.disableScrollToActiveOnOptionsChanged) {\n                  this.adjustScrollTopToFitActiveOptionIntoView();\n                }\n              }\n\n              // Update our reference\n              previousFirstOption = currentFirstOption;\n            });\n          });\n      });\n\n    // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n    this._showNoEntriesFound$.pipe(\n      takeUntil(this._onDestroy)\n    ).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    });\n\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect.panelOpen) {\n          this.updateInputWidth();\n        }\n      });\n\n    this.initMultipleHandling();\n\n    this.optionsList$.pipe(\n      takeUntil(this._onDestroy)\n    ).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  _emitSelectAllBooleanToParent(state: boolean) {\n    this.toggleAll.emit(state);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  _isToggleAllCheckboxVisible(): boolean {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if ((event.key && event.key.length === 1) ||\n      (event.keyCode >= A && event.keyCode <= Z) ||\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n      (event.keyCode === SPACE)\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\n    ) {\n      event.stopPropagation();\n    }\n\n    if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n      // Regain focus after multiselect, so we can further type\n      setTimeout(() => this._focus());\n    }\n\n    // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n      this._reset(true);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n  _handleKeyup(event: KeyboardEvent) {\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n      if (index !== -1) {\n        const activeDescendant = this._options.toArray()[index];\n        this.liveAnnouncer.announce(\n          activeDescendant.viewValue + ' '\n          + this.getAriaIndex(index)\n          + this.indexAndLengthScreenReaderText\n          + this.getAriaLength()\n        );\n      }\n    }\n  }\n\n  /**\n   * Calculate the index of the current option, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n   */\n  getAriaIndex(optionIndex: number): number {\n    if (this.getOptionsLengthOffset() === 0) {\n      return optionIndex + 1;\n    }\n    return optionIndex;\n  }\n\n  /**\n   * Calculate the length of the options, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n   *    Case 2 [1, 2, 3] will have length of options.length.\n   */\n  getAriaLength(): number {\n    return this._options.toArray().length - this.getOptionsLengthOffset();\n  }\n\n  writeValue(value: string) {\n    this._lastExternalInputValue = value;\n    this._formControl.setValue(value);\n    this.changeDetectorRef.markForCheck();\n  }\n\n  onBlur() {\n    this.onTouched();\n  }\n\n  registerOnChange(fn: (value: string) => void) {\n    this._formControl.valueChanges.pipe(\n      filter(value => value !== this._lastExternalInputValue),\n      tap(() => this._lastExternalInputValue = undefined),\n      takeUntil(this._onDestroy)\n    ).subscribe(fn);\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    this._formControl.setValue('');\n    if (focus) {\n      this._focus();\n    }\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    if (!this.matSelect.ngControl) {\n      if (this.matSelect.multiple) {\n        // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n        // is necessary to properly work in multi-selection mode.\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n      }\n      return;\n    }\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.previousSelectedValues = this.matSelect.ngControl.value;\n\n    this.matSelect.ngControl.valueChanges\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        let restoreSelectedValues = false;\n        if (this.matSelect.multiple) {\n          if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n        }\n        this.previousSelectedValues = values;\n\n        if (restoreSelectedValues) {\n          this.matSelect._onChange(values);\n        }\n      });\n  }\n\n  /**\n   * Scrolls the currently active option into the view if it is not yet visible.\n   */\n  private adjustScrollTopToFitActiveOptionIntoView(): void {\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\n      const matOptionHeight = this.getMatOptionHeight();\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n          - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n      }\n    }\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  public updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  private getMatOptionHeight(): number {\n    if (this.matSelect.options.length > 0) {\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n  private getOptionsLengthOffset(): number {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nexport const MatSelectSearchVersion = '3.3.0';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {MatSelectSearchClearDirective as Éµa} from './mat-select-search-clear.directive';"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}